<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
         http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx.xsd">
        <!-- 01引入 jdbc文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
        <!--02配置数据源-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.userName}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!--03.配置dao层-->
    <bean id="accountDao" class="com.hzq.dao.impl.AccountDaoImpl">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="stockDao" class="com.hzq.dao.impl.StockDaoImpl">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--04.配置service层-->
    <bean id="buyStockService" class="com.hzq.service.impl.BuyStockServiceImpl">
        <property name="accountDao" ref="accountDao"/>
        <property name="stockDao" ref="stockDao"/>
    </bean>
    <!--05无论使用什么方式 都必须创建事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--06. 使用AspectJ 实现spring对事务的管理-->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="buyStock" isolation="DEFAULT" propagation="REQUIRED"
                       rollback-for="com.hzq.service.BuyStockException"/>
        </tx:attributes>
    </tx:advice>
    <!-- 07.配置切入点-->
    <aop:config>
        <aop:pointcut id="myPoint" expression="execution(* *..service.*.*(..))"/>
        <aop:advisor advice-ref="myAdvice" pointcut-ref="myPoint"/>
    </aop:config>

    <!--使用注解的方式 实现事务的管理-->
<!--    <tx:annotation-driven transaction-manager="trnsactionManager"/>-->

</beans>